Да се дефинира класа SpaceObject во која ќе се чуваат информации за:
name (низа од максимум 100 карактери) - име на објектот
type (низа од максимум 100 карактери) - тип на објектот
distanceFromEarth (цел број) - оддалеченост од Земја
методи кои што класата треба да ги има:
print() 
-Принта во формат:
"[name] ( [type] ) - distance: [distanceFromEarth] light years away from Earth".
Да се дефинира класа Alien во која ќе се чуваат информации за:
name (низа од максимум 100 карактери) - име 
age (цел број) - возраст
homePlanet (низа од максимум 100 карактери) - планета на која што живее
numObj (цел број) - број на омилени вселенски објекти
spaceObjects (низа од SpaceObject објекти) - омилени вселенски објекти 
методи кои што класата треба да ги има:
SpaceObject getObjectClosestToEarth()  
- Ќе го врати објектот кој што им е еден од омилените а има најмала оддалеченост од Земјата.
print() 
-Принта во формат:
Alien name: ...
Alien age: ...
Alien homePlanet: ...
Favourite space object closest to earth: ....
Сите променливи внатре во класите треба да бидат приватни. Соодветно во рамките на класите да се дефинираат:
конструктор (без и со параметри)
деструктор
set методи
get методи
copy constructor
ДА НЕ СЕ МЕНУВА main() ФУНКЦИЈАТА.

---

#include <iostream>
#include <cstring>

using namespace std;

class SpaceObject{
    private:
    char name[100];
    char type[100];
    int distanceFromEarth;
    public:
    SpaceObject(){
        
    }
    
    SpaceObject(char *name, char *type, int distanceFromEarth)
    {
        strcpy(this->name,name);
        strcpy(this->type,type);
        this->distanceFromEarth=distanceFromEarth;
    }
    
     SpaceObject(const SpaceObject &s)
    {
      strcpy(this->name, s.name);
      strcpy(this->type, s.type);
      this->distanceFromEarth = s.distanceFromEarth;
    }
    
    ~SpaceObject(){}
    
     char *getName(){
         return this->name;
     }
    
     char *getType(){
         return this->type;
     }
     
     int getDistanceFromEarth(){
         return this->distanceFromEarth;
     }
     
     void setName(char *name){
         strcpy(this->name, name);
     }
     
     void setType(char *type){
         strcpy(this->type, type);
     }
     
     void setDistanceFromEarth(int distanceFromEarth){
         this->distanceFromEarth=distanceFromEarth;
     }
     
     void print(){
         cout<<name<<" ("<<type<<") - distance: "<<distanceFromEarth<<" light years away from Earth"<<endl;
     }
    
};

class Alien{
    private:
    char name[100];
    int age;
    char homePlanet[100];
    int numObj;
    SpaceObject spaceObjects[100];
    public:
    Alien(){}
    
    Alien(char *name, int age, char *homePlanet, int numObj, SpaceObject *objects){
        strcpy(this->name,name);
        this->age = age;
        strcpy(this->homePlanet,homePlanet);
        this->numObj = numObj;
        for(int i=0;i<numObj;i++)
        {
            this->spaceObjects[i]=objects[i];
        }
    }
    
    Alien(const Alien &a)
    {
      strcpy(this->name, a.name);
      this->age = a.age;
      strcpy(this->homePlanet, a.homePlanet);
      this->numObj = a.numObj;
      for(int i=0;i<a.numObj;i++){
          this->spaceObjects[i] = a.spaceObjects[i];
      }
    }
    
    ~Alien(){}
    
    char *getName(){
        return this->name;
    }
    
    int getAge(){
        return this->age;
    }
    
    char *getHomePlanet(){
        return this->homePlanet;
    }
    
    int getNumObj(){
        return this->numObj;
    }
    
    SpaceObject *getSpaceObjects(){
        return spaceObjects;
    }
    
    void setName(char *name){
        strcpy(this->name,name);
    }
    
    void setAge(){
        this->age = age;
    }
    
    void setHomePlanet(char *homePlanet){
        strcpy(this->homePlanet,homePlanet);
    }
    
    SpaceObject getObjectClosestToEarth(){
        int minDistance=999999999, idx=0;
        
        for(int i=0;i<numObj;i++)
        {
            if(spaceObjects[i].getDistanceFromEarth()<minDistance)
            {
                minDistance=spaceObjects[i].getDistanceFromEarth();
                idx=i;
            }
        }
        return spaceObjects[idx];
    }
    
    void print(){
        cout<<"Alien name: "<<name<<endl;
        cout<<"Alien age: "<<age<<endl;
        cout<<"Alien home planet: "<<homePlanet<<endl;
        cout<<"Favourite space object closest to earth: ";
        getObjectClosestToEarth().print();
    }
    
};

//DO NOT CHANGE THE MAIN FUNCTION 
int main()
{
    char name[100], homePlanet[100];
    int age, numObj;
    cin>>name>>age>>homePlanet>>numObj;
    //Testing default constructor for SpaceObject
    SpaceObject spaceObjects[numObj];
    for(int i=0; i<numObj; i++)
    {
        char spaceObjectName[100], spaceObjectType[100];
        int distanceFromEarth;
        cin>>spaceObjectName>>spaceObjectType>>distanceFromEarth;
        //Testing constructor with arguments for SpaceObject
        spaceObjects[i]=SpaceObject(spaceObjectName, spaceObjectType, distanceFromEarth);
    }
    //Testing default constructor for Alien
    Alien alien;
    //Testing constructor with arguments for Alien and copy constructor for Alien
    alien=Alien(name, age, homePlanet, numObj, spaceObjects);
    Alien alien2 = Alien(alien);
 
    alien2.print();
    return 0;
}
